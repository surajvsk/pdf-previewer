<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" >
    <link href="https://cdn.jsdelivr.net/npm/pdfjs-dist@3.4.120/web/pdf_viewer.min.css" rel="stylesheet">
  </head>
  <body>
    <h1>PRIVIEW PDF FILES</h1>
    <button class="view-pdf">View PDF</button>

<!-- Modal -->
<div class="modal fade" id="priviewPdfModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
  <div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content rounded-0">
      <div class="modal-header d-flex justify-content-between">
        <div>
            <h1 class="modal-title fs-5" id="exampleModalLabel">Preview Uploaded Files</h1>
        </div>
            <div>
                <button id="prev" class="btn btn-sm btn-primary rounded-0">Previous</button>
                <button id="next" class="btn btn-sm btn-primary rounded-0">Next</button>
                <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
      </div>
      <div class="modal-body">
        <div class="priviewPdf">
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="previewQuestionToggle"  value="QPaper" data-id="1">
                <label class="form-check-label">Question Paper</label>
              </div>
              <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="previewQuestionToggle"  value="Synoptic" data-id="1">
                <label class="form-check-label" >Synoptic Answer</label>
              </div>
        </div>
    <canvas id="pdf-canvas"></canvas>
      </div>
      <div class="modal-footer d-flex justify-content-between">
        <div>
         <span> Are you sure you want to final submit question paper and synoptic answer?</span>
        </div>
        <div>
          <button type="button" class="btn btn-success rounded-0 QpFinalConfirm" data-status="Yes">Yes</button>
          <button type="button" class="btn btn-danger  rounded-0 QpFinalConfirm" data-status="No">No</button>
          <button type="button" class="btn btn-secondary  rounded-0" data-bs-dismiss="modal">Close</button>
        </div>
    </div>
    </div>
  </div>
</div>

    <script src="https://code.jquery.com/jquery-3.6.3.js" ></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" ></script>
    <script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script>
    <script>


$("#priviewPdfModal").on('click','.QpFinalConfirm', function(){
let confirm =  $(this).attr('data-status');
console.log('confirm::::::::::', confirm)

})


$("input[name='previewQuestionToggle']").on('change', function(){
    console.log('CLICK ON VIEW:::::::::::::::::::', $(this).val())
    callFetchApi($(this).attr('data-id'), $(this).val())
})





      $(".view-pdf").on('click', function () {
        $("#priviewPdfModal").modal('show')
      })

      function callFetchApi(id, type){

        let request_url = `/view-pdf/${id}/${type}`;
        fetch(request_url, {
              method: 'GET',
              headers: {
                  'Content-Type': 'application/pdf'
              },
          }).then((response) => {
                  console.log('API CALLING:::::>>>')
                  const reader = response.body.getReader();
                  return new ReadableStream({
                      start(controller) {
                          return pump();
                          function pump() {
                              return reader.read().then(({
                                  done,
                                  value
                              }) => {
                                  // When no more data needs to be consumed, close the stream
                                  if (done) {
                                      controller.close();
                                      return;
                                  }
                                  // Enqueue the next data chunk into our target stream
                                  controller.enqueue(value);
                                  return pump();
                              });
                          }
                      },
                  });
              })
              // Create a new response out of the stream
              .then((stream) => new Response(stream))
              // Create an object URL for the response
              .then((response) => response.blob())
              .then((blob) => {
                  let url = URL.createObjectURL(blob);
                  loadPdf(url);
              })
              .catch((err) => console.error(err));
      }





      let options = {};
      options.pdfDoc = null;
      options.pageNum = 1;
      options.pageRendering = false;
      options.pageNumPending = null;
      options.scale = 0.8;
      options.canvas = document.getElementById('pdf-canvas');
      options.ctx = options.canvas.getContext('2d');
      // Loaded via <script> tag, create shortcut to access PDF.js exports.
      let pdfjsLib = window['pdfjs-dist/build/pdf'];
      // The workerSrc property shall be specified.
      pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://mozilla.github.io/pdf.js/build/pdf.worker.js';
      // Using DocumentInitParameters object to load binary data.
      function loadPdf(url) {
          var pdfDoc = null,
              pageNum = 1,
              pageRendering = false,
              pageNumPending = null,
              scale = 1.5, //0.8 preview scale value
              canvas = document.getElementById('pdf-canvas'),
              ctx = canvas.getContext('2d');
          function renderPage(num) {
              pageRendering = true;
              pdfDoc.getPage(num).then(function (page) {
                  var viewport = page.getViewport({ scale: scale });
                  canvas.height = viewport.height;
                  canvas.width = viewport.width;

                  var renderContext = {
                      canvasContext: ctx,
                      viewport: viewport
                  };
                  var renderTask = page.render(renderContext);
                  renderTask.promise.then(function () {
                      pageRendering = false;
                      if (pageNumPending !== null) {
                          renderPage(pageNumPending);
                          pageNumPending = null;
                      }
                  });
              });

              document.getElementById('page_num').textContent = num;
          }
          function queueRenderPage(num) {
              if (pageRendering) {
                  pageNumPending = num;
              } else {
                  renderPage(num);
              }
          }
          function onPrevPage() {
              if (pageNum <= 1) {
                  return;
              }
              pageNum--;
              queueRenderPage(pageNum);
          }
          document.getElementById('prev').addEventListener('click', onPrevPage);
          function onNextPage() {
              if (pageNum >= pdfDoc.numPages) {
                  return;
              }
              pageNum++;
              queueRenderPage(pageNum);
          }
          document.getElementById('next').addEventListener('click', onNextPage);
          pdfjsLib.getDocument(url).promise.then(function (pdfDoc_) {
              pdfDoc = pdfDoc_;
              document.getElementById('page_count').textContent = pdfDoc.numPages;
              // Initial/first page rendering
              renderPage(pageNum);
          });
      }
  </script>
</body>
</html>